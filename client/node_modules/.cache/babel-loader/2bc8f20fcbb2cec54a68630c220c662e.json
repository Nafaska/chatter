{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const registrationSlice = createSlice({\n  name: \"registration\",\n  initialState: {\n    password: \"\",\n    email: \"\"\n  },\n  reducers: {\n    createPassword: (state, action) => {\n      state.password = action.payload;\n    },\n    createEmail: (state, action) => {\n      state.email = action.payload;\n    }\n  }\n});\nexport const {\n  createEmail,\n  createPassword\n} = registrationSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n// export const updateEmail = (email) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(createEmail(email));\n//   }, 1000);\n// };\n\nexport const selectEmail = state => state.registration.email;\nexport const selectPassword = state => state.registration.pass;\nexport default registrationSlice.reducer;","map":{"version":3,"sources":["/Users/victoria/homeprojects/skillcrushial/chat/client/src/features/registration/registrationSlice.js"],"names":["createSlice","registrationSlice","name","initialState","password","email","reducers","createPassword","state","action","payload","createEmail","actions","selectEmail","registration","selectPassword","pass","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,iBAAiB,GAAGD,WAAW,CAAC;AAC3CE,EAAAA,IAAI,EAAE,cADqC;AAE3CC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE,EADE;AAEZC,IAAAA,KAAK,EAAE;AAFK,GAF6B;AAM3CC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjCD,MAAAA,KAAK,CAACJ,QAAN,GAAiBK,MAAM,CAACC,OAAxB;AACD,KAHO;AAIRC,IAAAA,WAAW,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC9BD,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACC,OAArB;AACD;AANO;AANiC,CAAD,CAArC;AAgBP,OAAO,MAAM;AAAEC,EAAAA,WAAF;AAAeJ,EAAAA;AAAf,IAAkCN,iBAAiB,CAACW,OAA1D,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIL,KAAD,IAAWA,KAAK,CAACM,YAAN,CAAmBT,KAAlD;AACP,OAAO,MAAMU,cAAc,GAAIP,KAAD,IAAWA,KAAK,CAACM,YAAN,CAAmBE,IAArD;AAEP,eAAef,iBAAiB,CAACgB,OAAjC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const registrationSlice = createSlice({\n  name: \"registration\",\n  initialState: {\n    password: \"\",\n    email: \"\",\n  },\n  reducers: {\n    createPassword: (state, action) => {\n      state.password = action.payload;\n    },\n    createEmail: (state, action) => {\n      state.email = action.payload;\n    },\n  },\n});\n\nexport const { createEmail, createPassword } = registrationSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// export const updateEmail = (email) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(createEmail(email));\n//   }, 1000);\n// };\nexport const selectEmail = (state) => state.registration.email;\nexport const selectPassword = (state) => state.registration.pass;\n\nexport default registrationSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}